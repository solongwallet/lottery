{"version":3,"file":"index.cjs.js","sources":["../src/utils.js","../src/SolongLottery.js","../src/Layout.js"],"sourcesContent":["\nexport function intFromBytes(byteArr) {\n    let ret = 0;\n    byteArr.forEach((val, i) => { ret += val * 256 ** i; });\n    return ret;\n}","/**\n * @flow\n */\n\nimport { \n    PublicKey,\n    SystemProgram,\n    TransactionInstruction,\n    SYSVAR_CLOCK_PUBKEY } from \"@solana/web3.js\"\nimport {u64} from '@solana/spl-token'\nimport {intFromBytes} from './utils'\nimport * as BufferLayout from 'buffer-layout';\n\n\n/**\n * SolongLottery\n */\nexport class SolongLottery {\n    /**\n     * Construct an  Initialize instruction\n     *\n     */\n    static createInitializeInstruction(\n        adminAccountKey,\n        billboardAccountKey,\n        poolAccountKey,\n        programID,\n        fund,\n        price\n    ) {\n\n        const dataLayout = BufferLayout.struct([\n            BufferLayout.u8(\"i\"),\n            BufferLayout.blob(8,\"fund\"),\n            BufferLayout.blob(8,\"price\"),\n        ]);\n      \n        const data = Buffer.alloc(dataLayout.span);\n        dataLayout.encode(\n            {\n              i:1, // initialize instruct \n              fund:new u64(fund).toBuffer(),\n              price:new u64(price).toBuffer(),\n            },\n            data,\n        );\n      \n        let keys = [\n            {pubkey: adminAccountKey, isSigner: false, isWritable: true},\n            {pubkey: poolAccountKey, isSigner: false, isWritable: true},\n            {pubkey: billboardAccountKey, isSigner: false, isWritable: true},\n        ];\n\n        const  trxi = new TransactionInstruction({\n            keys,\n            programId: programID,\n            data,\n        });\n        return trxi;\n    }\n\n    /**\n     * Construct an  Sign instruction\n     *\n     */\n    static createSignInstruction(\n        playerAccountKey,\n        poolAccountKey,\n        programID,\n    ) {\n\n        const dataLayout = BufferLayout.struct([\n            BufferLayout.u8(\"i\"),\n        ]);\n      \n        const data = Buffer.alloc(dataLayout.span);\n        dataLayout.encode(\n            {\n              i:2, // sign instruct \n            },\n            data,\n        );\n      \n        let keys = [\n            {pubkey: playerAccountKey, isSigner: true, isWritable: true},\n            {pubkey: poolAccountKey, isSigner: false, isWritable: true},\n        ];\n\n        const  trxi = new TransactionInstruction({\n            keys,\n            programId: programID,\n            data,\n        });\n        return trxi;\n    }\n\n    /**\n     * Construct an  gm instruction\n     *\n     */\n    static createGMInstruction(\n        adminAccountKey,\n        poolAccountKey,\n        programID,\n        fund,\n        price\n    ) {\n\n\n        const dataLayout = BufferLayout.struct([\n            BufferLayout.u8(\"i\"),\n            BufferLayout.blob(8,\"fund\"),\n            BufferLayout.blob(8,\"price\"),\n        ]);\n      \n        const data = Buffer.alloc(dataLayout.span);\n        dataLayout.encode(\n            {\n              i:3, // gm instruct \n              fund:new u64(fund).toBuffer(),\n              price:new u64(price).toBuffer(),\n            },\n            data,\n        );\n      \n        let keys = [\n            {pubkey: adminAccountKey, isSigner: true, isWritable: true},\n            {pubkey: poolAccountKey, isSigner: false, isWritable: true},\n        ];\n\n        const  trxi = new TransactionInstruction({\n            keys,\n            programId: programID,\n            data,\n        });\n        return trxi;\n    }\n\n    /**\n     * Construct an  roll instruction\n     *\n     */\n    static createRollInstruction(\n        adminAccountKey,\n        poolAccountKey,\n        billboardAccountKey,\n        programID,\n    ) {\n\n        const dataLayout = BufferLayout.struct([\n            BufferLayout.u8(\"i\"),\n        ]);\n      \n        const data = Buffer.alloc(dataLayout.span);\n        dataLayout.encode(\n            {\n              i:4, // roll instruct \n            },\n            data,\n        );\n      \n        let keys = [\n            {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n            {pubkey: adminAccountKey, isSigner: true, isWritable: true},\n            {pubkey: poolAccountKey, isSigner: false, isWritable: true},\n            {pubkey: billboardAccountKey, isSigner: false, isWritable: true},\n        ];\n\n        const  trxi = new TransactionInstruction({\n            keys,\n            programId: programID,\n            data,\n        });\n        return trxi;\n    }\n\n\n\n    /**\n     * Construct an  reward instruction\n     *\n     */\n    static createRewardInstruction(\n        adminAccountKey,\n        playerAccountKey,\n        billboardAccountKey,\n        programID,\n    ) {\n\n        const dataLayout = BufferLayout.struct([\n            BufferLayout.u8(\"i\"),\n        ]);\n      \n        const data = Buffer.alloc(dataLayout.span);\n        dataLayout.encode(\n            {\n              i:5, // reward instruct \n            },\n            data,\n        );\n      \n        let keys = [\n            {pubkey: SystemProgram.programId, isSigner: false, isWritable: true},\n            {pubkey: adminAccountKey, isSigner: true, isWritable: true},\n            {pubkey: playerAccountKey, isSigner: false, isWritable: true},\n            {pubkey: billboardAccountKey, isSigner: false, isWritable: true},\n        ];\n\n        const  trxi = new TransactionInstruction({\n            keys,\n            programId: programID,\n            data,\n        });\n        return trxi;\n    }\n\n    static async GetLotteryPool(\n        connection,\n        poolAccountKey,\n    ) {\n        let resp = await connection._rpcRequest('getAccountInfo', [\n            poolAccountKey.toBase58(),\n            {\n              encoding:'jsonParsed',\n              commitment: 'recent',\n            }\n        ])\n        let lottery = {};\n        //console.log(\"resp:\", resp);\n        if (resp.result ) {\n            const result = resp.result;\n            //console.log(\"result:\",result)\n            const pool_buf = result.value.data[0];\n            const pool = Buffer.from(pool_buf, 'base64');\n            //console.log(\"pool:\", pool);\n            const award = intFromBytes(pool.slice(0,8));\n            const fund = intFromBytes(pool.slice(8,16));\n            const price = intFromBytes(pool.slice(16,24));\n            const playerCount = intFromBytes(pool.slice(56,58));\n            //console.log(\"Player count:\", playerCount);\n            let players = new Map();\n            for(let i=0; i< playerCount; i++) {\n                const offset = 58+i*35;\n                const playerAccountKey =  new PublicKey(pool.slice(offset,offset+32)).toBase58(); \n                const playerLottery =  intFromBytes(pool.slice(offset+32,offset+32+2));\n                players.set(playerAccountKey, playerLottery);\n            }\n\n            lottery = {\n                award:award,\n                fund:fund,\n                price:price,\n                players:players,\n            };\n            console.log(\"lottery:\", lottery);\n\n            return lottery; \n        } else {\n            return null;\n        }\n    }\n    \n    static async GetBillboard(\n        connection,\n        billboardAccountKey,\n    ) {\n        let resp = await connection._rpcRequest('getAccountInfo', [\n            billboardAccountKey.toBase58(),\n            {\n              encoding:'jsonParsed',\n              commitment: 'recent',\n            }\n        ])\n        let billboard = [];\n        //console.log(\"resp:\", resp);\n        if (resp.result  ) {\n            const result = resp.result;\n            //console.log(\"result:\",result)\n            const pool_buf = result.value.data[0];\n            const pool = Buffer.from(pool_buf, 'base64');\n            //console.log(\"pool:\", pool);\n            \n            const awardCount = intFromBytes(pool.slice(0,2));\n            //console.log(\"awardCount count:\", awardCount);\n            for(let i=0; i< awardCount; i++) {\n                const index = 2+(32+8+1+8)*i;\n                const key =  new PublicKey(pool.slice(index,index+32)); \n                const award =  intFromBytes(pool.slice(index+32,index+40));\n                const reward =  pool.slice(index+40,index+41)[0];\n                const timestamp =  intFromBytes(pool.slice(index+41,index+49));\n                const record = {\n                    account:key.toBase58(),\n                    award: award,\n                    reward:reward,\n                    timestamp:timestamp,\n                };\n                billboard.push(record)\n            }\n            console.log(\"billboard:\", billboard);\n            return billboard; \n        } else {\n            return null;\n        }\n    }\n}","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport function publicKey(property) {\n    return BufferLayout.blob(32, property);\n}\n\nexport const poolSpace = 8+8+8+32+2+1000*(32+2+1);\nexport const awardSpace = 2+1000*(32+8+1+8);\n\n/**\n * Layout for LotteryInitState \n */\n\nexport const LotteryInitState = BufferLayout.struct([\n\n]);"],"names":["intFromBytes","byteArr","ret","forEach","val","i","SolongLottery","createInitializeInstruction","adminAccountKey","billboardAccountKey","poolAccountKey","programID","fund","price","dataLayout","BufferLayout","data","Buffer","alloc","span","encode","u64","toBuffer","keys","pubkey","isSigner","isWritable","trxi","TransactionInstruction","programId","createSignInstruction","playerAccountKey","createGMInstruction","createRollInstruction","SYSVAR_CLOCK_PUBKEY","createRewardInstruction","SystemProgram","GetLotteryPool","connection","resp","_rpcRequest","toBase58","encoding","commitment","lottery","result","pool_buf","value","pool","from","award","slice","playerCount","players","Map","offset","PublicKey","playerLottery","set","console","log","GetBillboard","billboard","awardCount","index","key","reward","timestamp","record","account","push","poolSpace","awardSpace","LotteryInitState"],"mappings":"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"}